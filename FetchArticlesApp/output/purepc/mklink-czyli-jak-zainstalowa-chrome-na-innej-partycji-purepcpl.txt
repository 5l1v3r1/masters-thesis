Ze skrótów na pulpicie korzysta każdy użytkownik komputera, niezależnie od poziomu dysponowanej wiedzy. Skrót umożliwia szybszy dostęp do ukrytego w meandrach eksploratora pliku, jednak czy może prowadzić do całego folderu? Tutaj zaczynają się schody, bowiem Windows nie umożliwia takiej operacji z poziomu nakładki graficznej, niezależnie od edycji. Z pomocą mogą przyjść operacje tekstowe, dokonywane w konsoli systemowej. W tym momencie zapewne niejeden weteran programowania w Shellu, nakładce graficznej systemu Windows, pokręci głową z dezaprobatą, bowiem dla znawców używanie polecenia mklink stanowi chleb powszedni. Poradnik ten dedykowany jest jednak wszystkim tym, którzy nie zagłębiają się często ani w arkana Rejestru, ani w zabawy w BIOS-ie, ani też w konsolę systemową. Mając to za sobą, dowiedzmy się krok po kroku, w jaki sposób używać dowiązań oraz powiązania katalogów, a także do czego mogą przydać się linki. Użycie dowiązania symbolicznego lub powiązania katalogu zapewnia tak samo szybkie uruchamianie się programu, nie wpływa na wykorzystanie pamięci podręcznej ani nie spowalnia pracy aplikacji. Od wybranej powłoki systemowej zależeć będzie to, jak będzie wyglądał m.in. Eksplorator. Zacznijmy od tego, czym jest Shell, czyli powłoka systemowa środowiska Windows. Jest to bazowy program, uruchamiający się z chwilą zalogowania się do systemu operacyjnego. Elementami tego interfejsu są między innymi pulpit, menu Start, pasek zadań, zasobnik systemowy, Eksplorator itd. Powłoka organizuje foldery i pliki w zhierarchizowaną przestrzeń nazw, umożliwiając użytkownikom zoptymalizowaną i ujednoliconą interakcję i zarządzanie tymi obiektami bez potrzeby używania konsoli systemowej. Shell reguluje to, jakie elementy zawiera wstążka Eksploratora, w jaki sposób odbywa się nawigacja po katalogach, jak wygląda menu Start etc. Swoją drogą, jeśli nie możemy przyzwyczaić się do wyglądu interfejsu w dwóch najnowszych edycjach systemu Windows, polecam sprawdzenie Classic Shella dla Windows 8, 8.1 oraz 10, umożliwiającego sporą dowolność konfiguracji. Jest darmowy, w przeciwieństwie do alternatyw pokroju Start10, Start8 czy StartIsBack, oferujących darmowy 30-dniowy okres próbny, po którym uruchomią się dopiero po wykupieniu licencji. Definicja linku Wracając do meritum, czym tak naprawdę jest link? To nic innego niż wirtualny obiekt, wskazujący na pewną rzeczywistą lokalizację, zapisaną w pamięci komputera. Można go porównać do klasycznego skrótu na pulpicie, ponieważ zasadniczo spełnia tę samą funkcję. Przypuśćmy, że mamy folder Real na partycji A:\ oraz wskazujący na niego folder Fake na dysku B:\. Zapisując pliki w lokalizacji Fake, tak naprawdę zachowujemy je w podłączonym katalogu Real. W rzeczywistości folder B:\Fake nie istnieje, jednak system odpowiada na każde nasze zapytanie odnośnie tej lokalizacji, dając nam możliwość interakcji z zawartością A:\Real, tak jakby była to zawartość B:\Fake. Istnieją 3 rodzaje linków: dowiązanie twarde / łącze stałe (ang. hard link), dowiązanie miękkie / symboliczne (ang. soft / symbolic link) oraz tzw. powiązanie katalogów lub punkt powiązania (ang. Junction Directory / Point). Hard link - dowiązanie twarde lub stałe Dowiązanie twarde pozwala na utworzenie zajmującego tylko kilka bajtów łącza, działającego nieco na zasadzie chmury - wprowadzone zmiany, np. kolejna linijka w pliku tekstowym, automatycznie powielane są we wszystkich referencjach danego pliku, jednak usunięcie pliku pierwotnego nie powoduje wygaśnięcia linku, jak miałoby to miejsce w przypadku skrótów. Miejsce z dysku zwalniane jest dopiero wtedy, gdy wszystkie referencje danego pliku zostaną usunięte. Co więcej, w przypadku istnienia kilku dowiązań, nawet po skasowaniu pliku pierwotnego, zmiany dokonane w jednym z tych linków nadal są zapisywane w każdym z nich. W momencie utworzenia dowiązania twardego do wszystkich instancji danego pliku doklejana jest ikonka czerwonej strzałki. Hard linki mają jednak trzy ograniczenia: działają tylko w obrębie systemu plików NTFS, w granicach jednej partycji lokalnej i można ich użyć jedynie w przypadku plików. Soft link - dowiązanie miękkie, zwane symbolicznym Części powyższych ograniczeń pozbawiony jest jednak kolejny rodzaj linków, mianowicie dowiązanie miękkie, zwane symbolicznym Jest to specjalny rodzaj pliku, określonego za pomocą rozszerzenia .symlink, odwołującego się do pliku lub folderu. Dzięki niemu utworzymy dowiązania do lokalizacji znajdujących się na innych partycjach lokalnych (ale nie zewnętrznych), posiadających system plików NTFS. Nie mam niestety możliwości sprawdzenia, jak to wygląda w przypadku linkowania do obiektu będącego na innym dysku fizycznym. Dowiązanie symboliczne może odnosić się do obiektu nieistniejącego - wtedy po prostu nie działa, nie zwracając żadnego błędu. Odwołanie nie jest widoczne na poziomie domyślnej nakładki systemowej, tj. traktowane jest jak zwykły plik lub katalog. W oknie Właściwości linku prowadzącego zarówno do plików, jak i folderów, znajdziemy zakładkę Skrót, jednak ikona dowiązania nie będzie posiadać charakterystycznej dla skrótów strzałki. Junction, czyli powiązanie katalogów lub punkt powiązania Ostatnim, nieco różniącym się od dowiązań symbolicznych typem linku, jest powiązanie katalogów lub punkt powiązania. Junction Point standardowym elementem Wiersza polecenia stało się dopiero w systemie Vista. Użytkownicy starszych wersji środowiska Windows, wliczając w to XP, muszą zdać się ma program Junction.exe, dostępny w oficjalnej bazie programów wewnętrznych Microsoftu. By móc skorzystać z tej funkcji, z pobranego archiwum zip należy wypakować plik Junction.exe (dla systemu 32-bitowego) lub Junction64.exe (w Windows XP 64-bit), po czym umieścić go w katalogu C:\Windows\System32. By sprawdzić, ilo-bitową wersją systemu dysponujemy, wchodzimy do Panelu Sterowania, i, mając włączony widok dużych ikon, klikamy podwójnie na polu System. W nowo otwartym oknie wiersz Typ systemu w polu System ujawni wersję Windows, z jakiej korzystamy. Punkty powiązania od dowiązań symbolicznych różnią się doklejoną do obiektu ikonką ogniw łańcucha oraz brakiem karty Skrót we Właściwościach. Czym jest wiersz polecenia i jak z niego skorzystać? Cmd.exe jest jednym z dwóch (obok PowerShella) interpreterów poleceń, stosowanych w rodzinie systemów operacyjnych Microsoft Windows NT, którego zadaniem jest interpretowanie wprowadzanych w wierszu poleceń znaków jako nazw poleceń, programów, plików czy parametrów. By móc użyć polecenia mklink lub programu Junction.exe, musimy posiadać uprawnienia administratora - w tym celu w systemie Windows 10 wyszukujemy w Menu Start hasło "cmd", po czym podświetloną pozycję Wiersz polecenia zatwierdzamy kombinacją klawiszy Ctrl+Shift+Enter. Możemy też kliknąć PPM (prawym przyciskiem myszy) na przycisk Start i zaznaczyć pozycję Wiersz polecenia (administrator). Dostęp do konsoli uzyskamy również, wybierając we wstążce okna Eksploratora listę Plik, po czym przechodząc kolejno przez pozycje Otwórz wiersz polecenia oraz Otwórz wiersz polecenia jako administrator. Nawigowanie po otwartej w ten sposób konsoli rozpoczniemy od katalogu, w którym została uruchomiona, jednak w przypadku polecenia mklink nie wpływa to na powodzenie operacji. Składnia komendy mklink prezentuje się następująco: mklink /parametr "ścieżka_dowiązania" "ścieżka_obiektu_pierwotnego" Chcąc utworzyć np. link do pliku "poradnik.docx", musimy zawrzeć jego nazwę (niekoniecznie zaś rozszerzenie) w ścieżce dowiązania, wpisując np. "D:\User\Dokumenty\plik", inaczej łącze nie zadziała, zwracając komunikat o błędzie: "Odmowa dostępu". W polu /parametr mamy do wyboru 4 opcje: nie wpisując niczego, utworzymy dowiązanie symboliczne pliku. /d stworzy dowiązanie miękkie do określonego folderu. /h pozwoli na uformowanie twardego linku. /j wykreuje powiązanie katalogów. Trzeba jednak uważać, by używać parametrów /D lub /J tylko w przypadku folderów, bo możemy niechcący utworzyć niedziałający link, który po próbie uruchomienia zwróci komunikat o błędzie. Niemożliwe jest także ponowne utworzenie tego samego linku symbolicznego, na które konsola odpowiada błędem: "Nie można utworzyć pliku, który już istnieje", nie dając nam możliwości zastąpienia dowiązania. Chcąc przenieść Google Chrome na inną partycję, musimy najpierw wyłączyć przeglądarkę, a najlepiej również wszystkie towarzyszące jej procesy przy pomocy Menedżera Zadań, odpalanego kombinacją klawiszy Ctrl+Shift+Escape. Mając to za sobą, wklejamy w pasek adresu Eksploratora lokalizację C:\Users\użytkownik\AppData\Local\Google i naciskamy Enter lub przechodzimy do niej, nawigując po kolejnych folderach. Pamiętamy, by pole użytkownik zastąpić swoją nazwą użytkownika, a konkretniej - nazwą folderu przechowującego nasze dane. W tym miejscu jednym z folderów, jakie ujrzymy, będzie katalog "Chrome". Wycinamy go, po czym wklejamy do pożądanej lokalizacji na innej partycji. To jeszcze nie koniec - by przeglądarka Google-a mogła się poprawnie uruchomić, należy utworzyć powiązanie katalogów, odnoszące się do przeniesionego przez nas folderu. W tym celu w konsoli systemowej wpisujemy następujący ciąg znaków: mklink /j "D:\Programy\Chrome" "C:\Users\użytkownik\AppData\Local\Google\Chrome" po czym zatwierdzamy polecenie klawiszem Enter. Jeśli uruchomiliśmy wiersz polecenia z uprawnieniami administratora i poprawnie podaliśmy obie ścieżki, polecenie utworzy punkt powiązania w dotychczasowej lokalizacji folderu Chrome, efektywnie oszukując program. Ścieżkę powiązania (pierwszy cudzysłów) oczywiście możemy wybrać dowolną, oczywiście wyłączając pamięć przenośną. Na dobrą sprawę nie ma znaczenia, czy skorzystamy z dowiązania symbolicznego (parametru /d) czy z powiązania katalogów (parametru /j), bowiem opcje te zapewniają tak samo szybkie uruchamianie się przeglądarki, nie wpływają na wykorzystanie pamięci podręcznej ani nie spowalniają pracy programu. W ten sposób możemy przenieść praktycznie każdy instalujący się domyślnie na dysku C:\ program, nie narażając systemu na zmniejszoną wydajność. Zastosowań jest oczywiście dużo więcej - mklink to bowiem narzędzie, które nie ogranicza nas jedynie do zaproponowanej przeze mnie aplikacji. Link Shell Extension - alternatywa dla konsoli Istnieje prostszy, bardziej efektywny i przystępny sposób na tworzenie linków, a jest to rozszerzenie powłoki systemowej Link Shell Extention. Do menu kontekstowego obiektów program ten dodaje pozycję Użyj jako źródła łącza, po kliknięciu której możemy wybrać dowolne inne miejsce na partycji lokalnej NTFS i kliknąć prawym przyciskiem myszy, by znaleźć 2 kolejne pozycje w menu. Pierwsza nosi nazwę Zrezygnuj z tworzenia łącza, której działania raczej nie trzeba wyjaśniać, za to druga to lista rozwijana, zbierająca wszystkie opcje linków, m.in. twarde, miękkie oraz powiązania. Po utworzeniu linku i wejściu w jego Właściwości, ujrzymy dodatkową kartę Właściwości łącza, podającą wskaźnik występowania dowiązań twardych oraz lokalizację każdego z nich (nawet, jeśli znajdują się w Koszu). Tagi: chrome, cmd, google, junction, konsola, link, powłoka, przeglądarka, shell, skrót, wiersz polecenia,Krzysztof WójtowiczZe skrótów na pulpicie korzysta każdy użytkownik komputera, niezależnie od poziomu dysponowanej wiedzy. Skrót umożliwia szybszy dostęp do ukrytego w meandrach eksploratora pliku, jednak czy może prowadzić do całego folderu? Tutaj zaczynają się schody, bowiem Windows nie umożliwia takiej operacji z poziomu nakładki graficznej, niezależnie od edycji. Z pomocą mogą przyjść operacje tekstowe, dokonywane w konsoli systemowej. W tym momencie zapewne niejeden weteran programowania w Shellu, nakładce graficznej systemu Windows, pokręci głową z dezaprobatą, bowiem dla znawców używanie polecenia mklink stanowi chleb powszedni. Poradnik ten dedykowany jest jednak wszystkim tym, którzy nie zagłębiają się często ani w arkana Rejestru, ani w zabawy w BIOS-ie, ani też w konsolę systemową. Mając to za sobą, dowiedzmy się krok po kroku, w jaki sposób używać dowiązań oraz powiązania katalogów, a także do czego mogą przydać się linki. Użycie dowiązania symbolicznego lub powiązania katalogu zapewnia tak samo szybkie uruchamianie się programu, nie wpływa na wykorzystanie pamięci podręcznej ani nie spowalnia pracy aplikacji. Od wybranej powłoki systemowej zależeć będzie to, jak będzie wyglądał m.in. Eksplorator. Zacznijmy od tego, czym jest Shell, czyli powłoka systemowa środowiska Windows. Jest to bazowy program, uruchamiający się z chwilą zalogowania się do systemu operacyjnego. Elementami tego interfejsu są między innymi pulpit, menu Start, pasek zadań, zasobnik systemowy, Eksplorator itd. Powłoka organizuje foldery i pliki w zhierarchizowaną przestrzeń nazw, umożliwiając użytkownikom zoptymalizowaną i ujednoliconą interakcję i zarządzanie tymi obiektami bez potrzeby używania konsoli systemowej. Shell reguluje to, jakie elementy zawiera wstążka Eksploratora, w jaki sposób odbywa się nawigacja po katalogach, jak wygląda menu Start etc. Swoją drogą, jeśli nie możemy przyzwyczaić się do wyglądu interfejsu w dwóch najnowszych edycjach systemu Windows, polecam sprawdzenie Classic Shella dla Windows 8, 8.1 oraz 10, umożliwiającego sporą dowolność konfiguracji. Jest darmowy, w przeciwieństwie do alternatyw pokroju Start10, Start8 czy StartIsBack, oferujących darmowy 30-dniowy okres próbny, po którym uruchomią się dopiero po wykupieniu licencji. Definicja linku Wracając do meritum, czym tak naprawdę jest link? To nic innego niż wirtualny obiekt, wskazujący na pewną rzeczywistą lokalizację, zapisaną w pamięci komputera. Można go porównać do klasycznego skrótu na pulpicie, ponieważ zasadniczo spełnia tę samą funkcję. Przypuśćmy, że mamy folder Real na partycji A:\ oraz wskazujący na niego folder Fake na dysku B:\. Zapisując pliki w lokalizacji Fake, tak naprawdę zachowujemy je w podłączonym katalogu Real. W rzeczywistości folder B:\Fake nie istnieje, jednak system odpowiada na każde nasze zapytanie odnośnie tej lokalizacji, dając nam możliwość interakcji z zawartością A:\Real, tak jakby była to zawartość B:\Fake. Istnieją 3 rodzaje linków: dowiązanie twarde / łącze stałe (ang. hard link), dowiązanie miękkie / symboliczne (ang. soft / symbolic link) oraz tzw. powiązanie katalogów lub punkt powiązania (ang. Junction Directory / Point). Hard link - dowiązanie twarde lub stałe Dowiązanie twarde pozwala na utworzenie zajmującego tylko kilka bajtów łącza, działającego nieco na zasadzie chmury - wprowadzone zmiany, np. kolejna linijka w pliku tekstowym, automatycznie powielane są we wszystkich referencjach danego pliku, jednak usunięcie pliku pierwotnego nie powoduje wygaśnięcia linku, jak miałoby to miejsce w przypadku skrótów. Miejsce z dysku zwalniane jest dopiero wtedy, gdy wszystkie referencje danego pliku zostaną usunięte. Co więcej, w przypadku istnienia kilku dowiązań, nawet po skasowaniu pliku pierwotnego, zmiany dokonane w jednym z tych linków nadal są zapisywane w każdym z nich. W momencie utworzenia dowiązania twardego do wszystkich instancji danego pliku doklejana jest ikonka czerwonej strzałki. Hard linki mają jednak trzy ograniczenia: działają tylko w obrębie systemu plików NTFS, w granicach jednej partycji lokalnej i można ich użyć jedynie w przypadku plików. Soft link - dowiązanie miękkie, zwane symbolicznym Części powyższych ograniczeń pozbawiony jest jednak kolejny rodzaj linków, mianowicie dowiązanie miękkie, zwane symbolicznym Jest to specjalny rodzaj pliku, określonego za pomocą rozszerzenia .symlink, odwołującego się do pliku lub folderu. Dzięki niemu utworzymy dowiązania do lokalizacji znajdujących się na innych partycjach lokalnych (ale nie zewnętrznych), posiadających system plików NTFS. Nie mam niestety możliwości sprawdzenia, jak to wygląda w przypadku linkowania do obiektu będącego na innym dysku fizycznym. Dowiązanie symboliczne może odnosić się do obiektu nieistniejącego - wtedy po prostu nie działa, nie zwracając żadnego błędu. Odwołanie nie jest widoczne na poziomie domyślnej nakładki systemowej, tj. traktowane jest jak zwykły plik lub katalog. W oknie Właściwości linku prowadzącego zarówno do plików, jak i folderów, znajdziemy zakładkę Skrót, jednak ikona dowiązania nie będzie posiadać charakterystycznej dla skrótów strzałki. Junction, czyli powiązanie katalogów lub punkt powiązania Ostatnim, nieco różniącym się od dowiązań symbolicznych typem linku, jest powiązanie katalogów lub punkt powiązania. Junction Point standardowym elementem Wiersza polecenia stało się dopiero w systemie Vista. Użytkownicy starszych wersji środowiska Windows, wliczając w to XP, muszą zdać się ma program Junction.exe, dostępny w oficjalnej bazie programów wewnętrznych Microsoftu. By móc skorzystać z tej funkcji, z pobranego archiwum zip należy wypakować plik Junction.exe (dla systemu 32-bitowego) lub Junction64.exe (w Windows XP 64-bit), po czym umieścić go w katalogu C:\Windows\System32. By sprawdzić, ilo-bitową wersją systemu dysponujemy, wchodzimy do Panelu Sterowania, i, mając włączony widok dużych ikon, klikamy podwójnie na polu System. W nowo otwartym oknie wiersz Typ systemu w polu System ujawni wersję Windows, z jakiej korzystamy. Punkty powiązania od dowiązań symbolicznych różnią się doklejoną do obiektu ikonką ogniw łańcucha oraz brakiem karty Skrót we Właściwościach. Czym jest wiersz polecenia i jak z niego skorzystać? Cmd.exe jest jednym z dwóch (obok PowerShella) interpreterów poleceń, stosowanych w rodzinie systemów operacyjnych Microsoft Windows NT, którego zadaniem jest interpretowanie wprowadzanych w wierszu poleceń znaków jako nazw poleceń, programów, plików czy parametrów. By móc użyć polecenia mklink lub programu Junction.exe, musimy posiadać uprawnienia administratora - w tym celu w systemie Windows 10 wyszukujemy w Menu Start hasło "cmd", po czym podświetloną pozycję Wiersz polecenia zatwierdzamy kombinacją klawiszy Ctrl+Shift+Enter. Możemy też kliknąć PPM (prawym przyciskiem myszy) na przycisk Start i zaznaczyć pozycję Wiersz polecenia (administrator). Dostęp do konsoli uzyskamy również, wybierając we wstążce okna Eksploratora listę Plik, po czym przechodząc kolejno przez pozycje Otwórz wiersz polecenia oraz Otwórz wiersz polecenia jako administrator. Nawigowanie po otwartej w ten sposób konsoli rozpoczniemy od katalogu, w którym została uruchomiona, jednak w przypadku polecenia mklink nie wpływa to na powodzenie operacji. Składnia komendy mklink prezentuje się następująco: mklink /parametr "ścieżka_dowiązania" "ścieżka_obiektu_pierwotnego" Chcąc utworzyć np. link do pliku "poradnik.docx", musimy zawrzeć jego nazwę (niekoniecznie zaś rozszerzenie) w ścieżce dowiązania, wpisując np. "D:\User\Dokumenty\plik", inaczej łącze nie zadziała, zwracając komunikat o błędzie: "Odmowa dostępu". W polu /parametr mamy do wyboru 4 opcje: nie wpisując niczego, utworzymy dowiązanie symboliczne pliku. /d stworzy dowiązanie miękkie do określonego folderu. /h pozwoli na uformowanie twardego linku. /j wykreuje powiązanie katalogów. Trzeba jednak uważać, by używać parametrów /D lub /J tylko w przypadku folderów, bo możemy niechcący utworzyć niedziałający link, który po próbie uruchomienia zwróci komunikat o błędzie. Niemożliwe jest także ponowne utworzenie tego samego linku symbolicznego, na które konsola odpowiada błędem: "Nie można utworzyć pliku, który już istnieje", nie dając nam możliwości zastąpienia dowiązania. Chcąc przenieść Google Chrome na inną partycję, musimy najpierw wyłączyć przeglądarkę, a najlepiej również wszystkie towarzyszące jej procesy przy pomocy Menedżera Zadań, odpalanego kombinacją klawiszy Ctrl+Shift+Escape. Mając to za sobą, wklejamy w pasek adresu Eksploratora lokalizację C:\Users\użytkownik\AppData\Local\Google i naciskamy Enter lub przechodzimy do niej, nawigując po kolejnych folderach. Pamiętamy, by pole użytkownik zastąpić swoją nazwą użytkownika, a konkretniej - nazwą folderu przechowującego nasze dane. W tym miejscu jednym z folderów, jakie ujrzymy, będzie katalog "Chrome". Wycinamy go, po czym wklejamy do pożądanej lokalizacji na innej partycji. To jeszcze nie koniec - by przeglądarka Google-a mogła się poprawnie uruchomić, należy utworzyć powiązanie katalogów, odnoszące się do przeniesionego przez nas folderu. W tym celu w konsoli systemowej wpisujemy następujący ciąg znaków: mklink /j "D:\Programy\Chrome" "C:\Users\użytkownik\AppData\Local\Google\Chrome" po czym zatwierdzamy polecenie klawiszem Enter. Jeśli uruchomiliśmy wiersz polecenia z uprawnieniami administratora i poprawnie podaliśmy obie ścieżki, polecenie utworzy punkt powiązania w dotychczasowej lokalizacji folderu Chrome, efektywnie oszukując program. Ścieżkę powiązania (pierwszy cudzysłów) oczywiście możemy wybrać dowolną, oczywiście wyłączając pamięć przenośną. Na dobrą sprawę nie ma znaczenia, czy skorzystamy z dowiązania symbolicznego (parametru /d) czy z powiązania katalogów (parametru /j), bowiem opcje te zapewniają tak samo szybkie uruchamianie się przeglądarki, nie wpływają na wykorzystanie pamięci podręcznej ani nie spowalniają pracy programu. W ten sposób możemy przenieść praktycznie każdy instalujący się domyślnie na dysku C:\ program, nie narażając systemu na zmniejszoną wydajność. Zastosowań jest oczywiście dużo więcej - mklink to bowiem narzędzie, które nie ogranicza nas jedynie do zaproponowanej przeze mnie aplikacji. Link Shell Extension - alternatywa dla konsoli Istnieje prostszy, bardziej efektywny i przystępny sposób na tworzenie linków, a jest to rozszerzenie powłoki systemowej Link Shell Extention. Do menu kontekstowego obiektów program ten dodaje pozycję Użyj jako źródła łącza, po kliknięciu której możemy wybrać dowolne inne miejsce na partycji lokalnej NTFS i kliknąć prawym przyciskiem myszy, by znaleźć 2 kolejne pozycje w menu. Pierwsza nosi nazwę Zrezygnuj z tworzenia łącza, której działania raczej nie trzeba wyjaśniać, za to druga to lista rozwijana, zbierająca wszystkie opcje linków, m.in. twarde, miękkie oraz powiązania. Po utworzeniu linku i wejściu w jego Właściwości, ujrzymy dodatkową kartę Właściwości łącza, podającą wskaźnik występowania dowiązań twardych oraz lokalizację każdego z nich (nawet, jeśli znajdują się w Koszu). Tagi: chrome, cmd, google, junction, konsola, link, powłoka, przeglądarka, shell, skrót, wiersz polecenia,Krzysztof Wójtowicz