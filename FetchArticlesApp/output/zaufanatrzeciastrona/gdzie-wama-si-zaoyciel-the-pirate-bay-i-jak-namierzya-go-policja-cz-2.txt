Wiemy już z pierwszej części artykułu, że włamywacze uzyskali dostęp do serwera mainframe, na którym przetwarzane były ogromne ilości danych obywateli Szwecji. Jak jednak doszło do włamania? Do czego służyło narzędzie o bardzo swojsko brzmiącej nazwie? Czytasz drugą część artykułu. Jeśli jeszcze nie znasz części pierwszej, polecamy lekturę. Mimo, iż spędziliśmy już wiele godzin nad raportami z analizy powłamaniowej tego incydentu, ciągle sporo wydarzeń jest dla nas nie do końca jasnych. Niestety duża część dokumentacji jest dostępna wyłącznie po szwedzku, raport angielskojęzyczny jest bardzo chaotyczny, a do tego w ogóle nie znamy się na mainframe’ach i systemie z/OS. Postaramy się jednak opisać to, co udało nam się zrozumieć. Oprócz dokumentów procesowych opublikowanych przez Wikileaks (najciekawsze to raport z włamania po angielsku i szczegóły analizy nośników oskarżonych, niestety ponad 700 stron po szwedzku), bardzo cenne dla zrozumienia sytuacji są również artykuły z serwisu gnrq, prowadzonego przez przyjaciela anakaty. Początki włamania do serwera mainframe firmy Logica toną w mrokach dziejów. Z danych, przejętych przez policję na nośnikach należących do diROXa, wynika, że posiadał on dostęp do niektórych systemów firmy już w roku 2010. 29 stycznia 2010 zanotowano na skutek błędnej konfiguracji (domyślne konta) nieautoryzowany dostęp do serwera mainframe przy użyciu protokołu FTP. Nieznany użytkownik pobrał z serwera duże ilości danych, w tym udało mu się również uzyskać dostęp do częściowej listy kont w systemie. Konfiguracja serwera została poprawiona. Niestety brak dalszych szczegółów z tamtego okresu, a wszystkie dostępne raporty opisują dopiero włamanie, które miało miejsce w lutym 2012. Pierwsze zidentyfikowane nieautoryzowane logowanie FTP do systemów Logica w w 2012 roku miało miejsce 25. lutego, przy użyciu loginu i hasła konta AVIY356, wykorzystywanego przez szwedzki parlament. Do tej pory nie wyjaśniono, skąd atakujący miał dostęp do danych konta, wykorzystywanego do automatycznych transferów plików. W sieci krążą informacje, że włamywacze posiadali od kilku lat dostęp do systemów najważniejszych organów szwedzkiego państwa, jednak brak na to jakichkolwiek dowodów. Niestety nie potrafiliśmy znaleźć szczegółowych informacji, jakie kroki wykonali włamywacze, by uzyskać wyższe uprawnienia w systemie. Na pewno wykorzystali jednak jeden lub więcej błędów typu 0day. Prawdopodobnie w celu ich odnalezienia i przetestowania wykorzystali Herculesa, emulator systemów klasy mainframe, na którym uruchomili system z/OS. Aby odtworzyć atakowane środowisko, wykonali kopie i pobrali z serwerów wiele plików systemowych i konfiguracyjnych.   Zrzut ekranu Herculesa z programem włamywaczy   Według różnych źródeł włamywaczom udało się odnaleźć (i wykorzystać) co najmniej 2 nieznane wcześniej błędy pozwalające na podniesienie uprawnień w systemie. Jeden z nich to błąd w serwerze HTTP IBMa, a drugi to błąd w pliku CNMEUNIX, który w domyślnej konfiguracji posiada uprawnienia SUID 0 (co oznacza, że wykorzystując zawarte w nim błędy można wykonywać polecenia z uprawnieniami administratora systemu). W tym drugim przypadku co prawda dokumentacja producenta mówi wprost, że nie ma żadnego powodu, dla którego plik ten potrzebowałby takich uprawnień, ale mimo to posiada je w domyślnej konfiguracji. Jak wyglądało samo łączenie się do zdalnego serwera i uzyskiwanie uprawnień roota? Anakata (występujący pod nickiem tLt) pochwalił się tym koledze na ircu. Z raportów śledczych wynika, że jednym z najcenniejszych zasobów systemowych, do których dostali się włamywacze, był program RACF (Resource Access Control Facility), używany w systemie z/OS do uwierzytelnienia i zarządzania uprawnieniami użytkowników. Baza ta zawiera między innymi nazwy użytkowników oraz ich zahaszowane hasła. W bazie znajdowało się ok. 120 tysięcy kont użytkowników. Złamanie haseł użytkowników na pewno nie było trudnym zadaniem. Po pierwsze, RACF w bazie RACF przechowywane są dane kont TSO (shella na z/OS), a TSO dopuszcza nazwy użytkownika o długości maksymalnej 7 znaków, a maksymalna długość hasła to 8 znaków (poprawione po komentarzu Ziutka – patrz poniżej). Do tego większość implementacji dopuszcza w treści hasła jedynie litery, cyfry i 3 znaki specjalne: #, @, $. Hasz funkcji DES tworzony jest z klucza, którym jest hasło oraz soli, którą jest nazwa użytkownika. Aby nieco skomplikować życie osobom próbującym zrekonstruować działanie algorytmu, hasło jest przed haszowaniem odrobinę zmodyfikowane – każdy bajt jest XORowany wartością 0x55 oraz przesunięty w lewo o 1 bit. Algorytm tworzenia hasza hasła wygląda następująco: po podaniu hasła jest ono uzupełnianie (w razie takiej konieczności) spacjami do długości 8 znaków. Następnie każdy znak jest XORowany przez wartość ox55 a następnie przesunięty o 1 bit w lewo. Następnie identyfikator użytkownika (pełniący tu rolę soli) jest szyfrowany z użyciem algorytmu DES, gdzie kluczem jest zmodyfikowane hasło (poprawione po komentarzu Ziutka – patrz poniżej). Ustalenie algorytmu oraz stworzenie odpowiedniego modułu zajęło programistom popularnego narzędzia John the Ripper kilkanaście dni – obecnie program ten świetnie radzi sobie z hashami z bazy RACF. Powstało także narzędzie racf2john.c, które przekształca plik wyeksportowanej bazy w dane wejściowe, czytelne dla JtR. Modyfikacja ta została użyta przez włamywaczy do uzyskania dostępu do ogromnej liczby kont w systemie. Co ciekawe, na liście dyskusyjnej PaulDotCom pytanie o hashe RACF pojawiło się 28go lutego 2012, a na liście Johna The Rippera 3go marca 2012 – co za zbieg okoliczności… W trakcie śledztwa przeprowadzono test stopnia złożoności haseł użytkowników. W ciągu kilku dni, na zwykłym komputerze klasy PC, złamano hasła 30,000 ze 120,000 użytkowników. W późniejszej fazie ataku, oprócz wykorzystywania kont, do których hasła udało się włamywaczom złamać, manipulowali oni również uprawnieniami użytkowników w bazie RACF, nadając szerokie uprawnienia kontom, z których korzystali w celu dalszej penetracji systemu. W teorii, by zapewnić sobie dostęp do cudzego systemu, wystarczy jeden dobrze ukryty backdoor. Każdy kolejny zwiększa ryzyko wykrycia nieautoryzowanych działań, jednak zwiększa także szansę, że po usunięciu jednej furtki, druga nadal będzie działać. W systemie Logica odkryto kilka różnych backdoorów, w tym także dość trywialnych. Najbardziej zaawansowany był program, nazwany najpierw a.env a następnie, by lepiej ukryć go w środowisku z/OS, CSQXDISP, który nawiązywał sesję z predefiniowanym komputerem poza siecią firmy (na porcie 443, by wyglądać jeszcze bardziej niewinnie) i oczekiwał tam na połączenie przychodzące z dedykowanego klienta (o znamiennej nazwie aptcli). Dzięki połączeniu przez dodatkowy serwer ukrywał on również adres IP prawdziwego użytkownika. Drugi i trzeci backdoor opisany w raporcie były dużo prostsze. Poniższe rzuty ekranu mówią same za siebie.   Backdoor w inetd.conf   Jeden z najstarszych backdoorów świata, czyli dodatkowy wpis w pliku inetd.conf, zapewniający uruchomienie powłoki po połączeniu na port 443.   Dopisywanie kluczy ssh   Dopisanie własnego klucza do listy kluczy akceptowanych w ramach połączenia SSH, umożliwiające zdalne logowanie bez podawania hasła, jedynie w oparciu o klucz. W trakcie analizy zaatakowanego serwera odnaleziono wiele narzędzi, pozostawionych przez włamywaczy. Zdumiewa różnorodność języków programowania, w których były one stworzone. Na dyskach znalazły się nieznane wcześniej programy napisane w C, HLASM (assembler na platformę m.in. z/OS), REXX (zbliżony do Perla) oraz JCL. Oznacza to, że albo włamywacz był geniuszem, dla którego programowanie w kilku językach na mało popularnej platformie nie stanowi dużego wyzwania, albo administratorem z/OS, albo we włamaniu wzięło udział więcej osób. Jeśli chcecie spojrzeć na kod źródłowy narzędzi włamywaczy, to jeden z internautów zebrał wszystkie ujawnione fragmenty kodu na GitHubie. Jednym z najciekawszych naszych odkryć w czasie lektury raportu był jeden z programów w REXXie. Spójrzcie na fragment raportu.   Fragment raportu   Tak, program nazywa się po prostu „kurwa”. Choć podobnie brzmiące słowo istnieje w kilku językach, to pisownia nie pozostawia wiele wątpliwości. Pozostałe nazwy używanych narzędzi wyglądają na losowe lub opisujące ich funkcje (np. go, enum, kuku, duqu, qwe, bes). „Kurwa” jest jedyną nazwą na pierwszy rzut oka pochodzącą z innego języka niż angielski. Sam program służył zapewne do podniesienia uprawnień użytkownika przy założeniu, że można go było uruchomić z bitem SUID i uprawnieniami administratora. Czy narzędzie stworzył jakiś Polak? Czy jeden z włamywaczy znał język polski albo przynajmniej jego podstawy (nawet zredukowane do jednego słowa)? Na te pytania pewnie nie poznamy odpowiedzi. Koniec części drugiej. Ciąg dalszy wkrótce nastąpi, a w nim przeczytacie o dowodach wskazujących na anakatę, jego wyjaśnieniach oraz banku Nordea i prawie milionie dolarów.,Adam