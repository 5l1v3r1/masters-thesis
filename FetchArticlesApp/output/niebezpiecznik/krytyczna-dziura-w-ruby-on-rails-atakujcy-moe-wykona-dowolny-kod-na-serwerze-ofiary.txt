Jeśli twoja webaplikacja została stworzona przy pomocy frameworka Ruby on Rails to *NATYCHMIAST* zaaplikuj opublikowane właśnie patche — odkryto poważny błąd pozwalający atakującemu na zdalne wykonanie kodu. Dziura dotyczy wszystkich wersji Railsów z ostatnich 6 lat, zarówno w 2.x, jak i 3.x Co może zrobić atakujący? W skrócie, atakujący może zmusić webaplikację napisaną w Railsach do wykonania dowolnego kodu (np. system(“dowolna komenda”), a za błąd odpowiedzialny jest kod parsujący parametry XML typu Symbol i YAML (format serializacji danych). Jednym z założeniem Railsów jest to, że użytkownik nie jest w stanie wstrzyknąć “złośliwego” symbolu do aplikacji… Tymczasem obiekt YAML pozwala na stworzenie instancji dowolnej klasy znajdującej się w aplikacji… Kod “!ruby/object:A\nfoo: 1\nbar: 1\n” stworzy obiekt klasy A i ustawi mu atrubuty foo i bar na odpowiednie wartości. Tworzyć można także obiekty bibliotek typu rack… Podsumowując, atak polega na stworzeniu obiektu i przesłaniu go jako parametru do aplikacji. Przykładowe exploity na ten błąd krążą już po sieci, dlatego jak najszybciej należy zaktualizować Railsy do wersji 3.2.11, 3.1.10, 3.0.19, lub 2.3.15. Poniżej opis obu krytycznych podatności wykrytych przez Aarona Pattersona, a załatanych w najnowszych wersjach Ruby on Rails: CVE-2013-0155 – Active Record i JSON parameter parsing Błąd w parsowaniu JSON-a przy użyciu Active Record (wariant podatności CVE-2012-2660 orz CVE-2012-2694) pozwala atakującemu na wykonanie niespodziewanego zapytania do bazy typu IS NULL lub usunięcia klauzuli WHERE. CVE-2013-0156 – Błędy w Action Pack Błędy parsowania parametrów w Action Pack pozwalają na ominięcie uwierzytelnienia, wstrzykiwanie poleceń SQL, wstrzykiwanie dowolnego kodu, a także przeprowadzenie ataku DoS. Railsy potrafią automatycznie rzutować stringi na inne typy danych. Niektóre z rzutowań (dotyczące Symbols, YAML) są niefortunne. Aby pozbyć się podatności można wyłączyć obsługę XML-a: Railsy 3.x ActionDispatch::ParamsParser::DEFAULT_PARSERS.delete(Mime::XML) Railsy 2.3 ActionController::Base.param_parsers.delete(Mime::XML) Jeśli obsługa XML-a jest konieczna, należy wyłączyć Symbols i YAML: Railsy 2.x (usunąć) ActionController::Base.param_parsers[Mime::YAML] = :yaml Railsy 3.x (dodać) ActionDispatch::ParamsParser::DEFAULT_PARSERS.delete(Mime::YAML) Railsy 3.2, 3.1, 3.0 ActiveSupport::XmlMini::PARSING.delete("symbol") ActiveSupport::XmlMini::PARSING.delete("yaml") Railsy 2.3 ActiveSupport::CoreExtensions::Hash::Conversions::XML_PARSING.delete('symbol') ActiveSupport::CoreExtensions::Hash::Conversions::XML_PARSING.delete('yaml') Na koniec polecamy lekturę wpisu Felixa, który obrazuje jak przy pomocy powyższych podatności wykonać atak SQL injection. ,vi.curry