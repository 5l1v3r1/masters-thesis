Tak, to kolejny, już 4 z rzędu artykuł o Heartbleedzie (na pocieszenie, na jego końcu obiecuję wstawić skoczną piosenkę). Pisaliśmy już co prawda zarówno o tym jak wielkie żniwo zebrał atak Heartbleed, na czym polega i jak się przed nim ochronić …oraz uczulaliśmy was na to, że Heartbleed pozwala wykradać dane nie tylko z serwerów, ale również z waszych komputerów i telefonów komórkowych. Ale celowo powstrzymywaliśmy się od insynuacji czy błąd był powiązany z służbami NSA — do dziś… NSA wiedziało o dziurze wcześniej i miało korzystać z niej “od lat” Bloomberg właśnie powiedział głośno to, o czym wielu myślało po cichu. W artykule o krzykliwym tytule: “NSA korzystała z Heartbleed od lat“, powołując się na “2 anonimowe osoby powiązane ze sprawą” dziennikarz Bloomberga stawia tezę, że NSA wiedziała o błędzie Heartbleed, ale nie ujawniała tej informacji, bo wykorzystywała błąd do pozyskiwania danych wywiadowczych. Pozwolę sobie skomentować ten artykuł i podzielić się z Wami kilkoma refleksjami w temacie. Po pierwsze, jeśli rzeczywiście NSA wiedziała o tej dziurze, to nie “od lat“, a od maksymalnie 2 lat, bo wtedy ten błąd po raz pierwszy pojawił się w kodzie OpenSSL. Po drugie, czy rzeczywiście wiedziała? Na to póki co nie mamy twardych dowodów. Agencja co prawda zaprzecza, ale przecież wielokrotnie przyłapywano ją już na kłamstwach. Ale nawet jeśli przyjąć, że NSA nie znała Heartbleeda wcześniej, to nie oznacza to, że nie wie o innych, podobnie “krytycznych” błędach… Co ja robiłbym na miejscu NSA? Zacznę od tego, że wszyscy komentatorzy powinni najpierw zrozumieć, czym jest agencja wywiadowcza — jakie ma cele i jaki ma budżet (czyli możliwości i wpływy). Gdybym zarządzał NSA, miejscem w którym pracuje najwięcej matematyków i ogólnie “wielkich umysłów”, obowiązkowo zbudowałbym dedykowany zespół osób, którego jedynym zadaniem jest wyszukiwanie błędów w najpopularniejszych projektach Open Source. To dość łatwe zadanie, bo wbrew pozorom otwartość kodu wcale nie oznacza automatycznie jego bezpieczeństwa (chociaż publiczny dostęp do historii commitów na pewno pomaga w analizie pofuckupowej). Jak łatwe? 1. Budowa zespołu bughunterów Kilka lat temu jeden z profesorów na amerykańskiej uczelni wyłożył w 1 semestr swoim studentom “podstawy bezpieczeństwa aplikacji”, a przez 2 semestr kazał im wziąć na warsztat dowolny projekt Open Source i znaleźć w nim błędy bezpieczeństwa. Udało się każdemu zespołowi “świeżych” w temacie bezpieczeństwa studentów (niestety, nie jestem teraz w stanie odnaleźć dokładnego źródła, sprawa ma kilka(naście?) lat, ale ten dokument jest wystarczająco bliski). Zresztą tezę o łatwości znajdowania błędów bezpieczeństwa potwierdza projekt 2 Polaków, Mateusza “j00ru” Jurczyka i Gynvaela Coldwinda, którzy na tapet wzięli popularną open source’ową bibliotekę kodeków video FFmpeg i znaleźli w niej …1000+ bugów. Dodajmy, że nawet jeśli projekt nie ma dostępnego kodu źródłowego, to błędy bezpieczeństwa też można z łatwością w nim znajdować — i tu znów przytoczę projekt autorstwa j00ru i Gyna, który zaowocował znalezieniem kilkudziesięciu poważnych błędów w Adobe Readerze. Na szczęście obaj pracują dla Google, nie NSA …prawda, chłopaki? ;) 2. Pozyskiwanie kluczowych programistów do współpracy Drugą moją decyzją, zaraz po stworzeniu dedykowanego zespołu do szukania błędów w kodzie popularnego oprogramowania, byłaby próba zwerbowania do współpracy developerów tworzących kod kluczowego oprogramowania. NSA już to robi. Czasem pewnie oferując pieniądze, innym razem być może szantażując. Dowodów na naciski służb na programistów jest kilka, np. próba przekupienia programisty Microsoftu pracującego przy projekcie Bitlockera (narzędzie do szyfrowania dysku) do wprowadzenia backdoora. Ponoć służby o to samo prosiły także Linusa. Swego czasu lekkie poruszenie wywołały doniesienia o rzekomym wstrzyknięciu backdoora do implementacji IPSeca na OpenBSD. Historii tego typu pewnie byłoby więcej, gdyby nie prawo, które zabrania osobom z którymi rozmawiały służby na ujawnianie takiego faktu. Na marginesie, podobny paragraf jest w polskim kodeksie karnym… :> Do wprowadzenia fragmentu kodu odpowiadającego za atak Heartbleed do projektu OpenSSL przyznał się niemiecki programista, Robin Seggelmann. Czy został “kupiony” przez NSA? Przecież dodany przez niego kod został przejrzany i zaakceptowany przez innego programistę projektu OpenSSL-a. Obaj zostali “kupieni”? Ja raczej skłaniam się w kierunku tezy, iż był to błąd nieumyślny — jeśli więc NSA miało się o nim dowiedzieć, to albo dzięki przedstawionemu w poprzednim rozdziale własnemu zespołowi, który śledzi kod projektów Open Source w poszukiwaniu błędów, albo poprzez skupowanie 0day’ów z rynku, o czym poniżej. Zanim jednak do tego przejdziemy, waszej uwadze polecam świetny raport na temat sabotażu i złośliwych insiderów-programistów w firmie. 3. Skupowanie 0day’ów z rynku Mam już swój zespół bughunterów, mam “kupionych” developerów. Ale w bezpieczeństwie informacji, własny, nawet najlepszy zespół bezpieczników nie wystarczy. Zawsze coś się prześlizgnie. Wiedzą o tym firmy takie jak Google, czy Facebook, które pomimo utrzymywania jednych z najlepszych specjalistów od bezpieczeństwa ogłaszają programy typu Bug Bounty, co pozwala tanim kosztem pozyskać dodatkowe informacje o dziurach w oprogramowaniu. NSA dysponuje olbrzymim budżetem (oficjalnym i tzw. “czarnym”). Część z tego budżetu wydawałbym na kupno exploitów z “rynku”. Są specjalistyczne firmy, które szukają błędów i sprzedają je później agencjom rządowym (np. VUPEN, który na pewno sprzedawał swoje 0day’e do NSA). Istnieją także tzw. brokerzy, którzy skupują 0day’e od “młodych, zdolnych” i sprzedają je później “wyżej”. I tu dochodzimy do punktu kulminacyjnego mojego felietonu: NSA znalazło Heartbleeda samo, lub nie znalazło i kupiło od brokera 0day’ów — nie ma to znaczenia, w każdym z tych scenariuszy mogło swobodnie i niepostrzeżenie wykorzystywać ten błąd do kradzieży danych z serwerów inwigilowanych osób. Możnaby zażartować, że jeśli zespół wykwalifikowanych mózgów z NSA, którego jedynym zadaniem jest szukanie błędów w kodzie źródłowym “na pełnym etacie” nie był wstanie odnaleźć tego buffer underrunu w kodzie OpenSSL samodzielnie, to możemy spać spokojnie — nic nam nie grozi. Błąd! Dlaczego? Ponieważ to czy: NSA wiedziało lub nie wiedziało o Heartbleedzie — nie ma znaczenia, w swoim arsenale mają szereg innych exploitów/0day’ów, o czym często wspominał Edward Snowden. Jak widać, niezależnie od umiejętności analityków NSA, i tak, jako obywatele innego niż USA kraju, mamy przechlapane. Brak “wewnętrznych” umiejętności NSA rekompensuje posiadany przez agencję ogromny budżet i rynek handlu exploitami 0day. Skoro ja na to wpadłem… Zaproponowana przeze mnie strategia działania NSA nie powinna być zaskoczeniem dla nikogo, kto ma cokolwiek wspólnego z branżą bezpieczeństwa lub służbami dedykowanymi elektronicznemu wywiadowi. Jestem pewien, że w NSA pracują bardziej doświadczeni, a na pewno “podlejsi” ode mnie ludzie ;) …skoro więc ja na to wpadłem, to zapewne NSA realizuje tę politykę już od lat. Jest też bardziej niż pewne, że robi o wiele więcej. I wy też robilibyście to samo na ich miejscu, gdybyście mieli w ten sposób ustawione cele i taki budżet oraz wpływy… NSA oczywiście zaprzecza NSA oficjalnie zaprzeczyło, jakoby wiedziało o błędzie Heartbleed wcześniej: Zarówno w oświadczeniu NSA jak i samego Baracka Obamy przeczytać można: Postawię więc kilka pytań bez odpowiedzi: Czy, gdybyście wiedzieli o błędzie takiej klasy, trzymalibyście go dla siebie narażając na atak infrastrukturę rządową własnego kraju? Przecież skoro “my” wiemy, to może wiedzą także “oni” (Chińczycy, Rosjanie…)? Aby znaleźć dowód na wiedzę NSA o Heartbleedzie, należałoby zapewne sprawdzić, czy na przestrzeni ostatnich 2 lat, NSA nie wydała cichej rekomendacji niektórym amerykańskim placówkom rządowym, aby tak przekonfigurowali swoje serwery z OpenSSL (czyli podatne na atak), żeby wyłączyć na nich moduł heartbitu (w nim jest błąd). Niestety, chyba nie ma możliwości wstecznej weryfikacji, czy/kiedy heartbit był wspierany przez OpenSSL na rządowych, amerykańskich serwerach. A szkoda… Nie jest łatwo wykraść klucz prywatny atakiem Heartbleed Cloudflare wykonało mały eksperyment, który po części sugeruje, że być może od kilku dni zupełnie niepotrzebnie emocjonujemy się Heartbleedem, bo nie jest on znowuż tak użytecznym dla służb atakiem… Przypomnijmy tu, że o ile łatwo można odczytać za pomocą Heartbleeda fragmenty pamięci zawierające hasła i tokeny sesyjne, to jednak dla NSA najbardziej wartościowe będzie pozyskanie klucza prywatnego do certyfikatu SSL. To właśnie bowiem klucz pozwoli na rozszyfrowanie całego ruchu do serwera (przechodzącego przez węzły kontrolowane przez NSA) a także, a może przede wszystkim, rozszyfrowanie uprzednio nagranych szyfrowanych sesji “podejrzanych” osób, o ile serwer nie wspierał tzw. Forward Secrecy. Cloudflare wystawiło serwer z podatną na atak wersją biblioteki OpenSSL i poprosiło wykradzenie jego klucza prywatnego. Klucz udało się pozyskać 2 internautom, pierwszy wykonał 2,5 miliona zapytań, drugi pozyskał klucz w “tylko” 100 000 żądań. W trakcie ataków zrestartowano jednak serwer i podejrzewa się, że to mogło pomóc w umieszczeniu w pamięci klucza prywatnego tuż po restarcie. Epilog Biorąc pod uwagę wyniki eksperymentu Cloudflare’a, czy NSA miałoby trzaskać miliony zapytań, żeby zyskać klucz prywatny do serwera? A jednocześnie w niedawnych sprawach sądowych, udawać że klucza nie mają i wnioskować o niego? Przypomnijmy, że właśnie o klucz prywatny do certyfikatu SSL NSA prosiła właściciela serwisu Lavabit, na którym skrzynkę miał Edward Snowden. Dlaczego nie skorzystali z Heartbleedu do wycągnięcia klucza? A może jednak skorzystali i zrobili teatrzyk? Obawiam się, że NSA ma szereg innych asów w rękawie, dzięki którym może, w sprzyjających okolicznościach, pozyskiwać nie tylko klucze prywatne do certyfikatów SSL. W końcu połączenia szyfrowane najłatwiej podsłuchiwać przez kompromitację końcówki kryptograficznej …a te pracują pod kontrolą nie tylko jednej, dziurawej biblioteki SSL, ale szeregu innego rodzaju oprogramowania …i sprzętu. Jeśli to was nie przekonuje do zmiany haseł do wszystkich serwerów, do których logowaliście się na przestrzeni ostatnich 2 lat, to pewnie jesteście ludźmi, którzy nie mają nic do ukrycia ;) Dziwne połączenia na port 443 z 2013 roku EFF donosi, że już w 2013 jeden z administratorów zauważył próbę połączenia na 443, przedwcześnie zerwaną, ale wykonującą połączenie heartbeatowe. Zdarzenie to dało się namierzyć, ponieważ administrator ten miał włączone “bogate” logowanie ruchu. Pytanie, czy ktoś jeszcze zaobserwował takie próby połączeń? Pochodziły one z adresacji 193.104.110.12 oraz 193.104.110.20, należącej do botnetu, który stara się nagrywać ruch w sieciach IRC… (czy to brzmi jak agencja wywiadowcza?). Na koniec, zgodnie z obietnicą, piosenka — na lepszą pogodę ducha, żeby lżej wam było na …sercu ;) PS. Mam też dla Was 2 inne artykuły: :s/NSA/Chiny/ga oraz :s/NSA/Rosja/ga ,Piotr Konieczny