Ariel Sanchez z IO Active Labs, postanowił opublikować wyniki swoich badań dotyczących mobilnych aplikacji stworzonych przez światowe banki. A nie są one optymistyczne… Badanie applikacji do bankowości mobilnej Główne założenie badań prowadzonych przez Sancheza, polegało na przeprowadzeniu testów “Black Box” łącznej liczby 40 aplikacji należących do 60 najbardziej wpływowych (w konteście popularności/zasięgu) banków na świecie. Nie wiemy, czy wśród aplikacji znalazła się aplikacja któregoś z polskich banków — Sanchez nie ujawnia nazw, opublikował na swoim blogu jedynie pobieżną mapę lokalizacji niektórych banków. Wszystkie testy przeprowadzono na aplikacji klienckiej, wykluczając jakiekolwiek operacje związane z serwerami zewnętrznymi. Ponadto badano tylko aplikacje w wersji na iOS. Narzędzia z jakich skorzystano to otool, Burp Proxy oraz IDA PRO, Clutch, objc-helper-plugin-ida, ssh, gdb i IPCU. Testy, zakładały takie aspekty bezpieczeństwa jak: 1. Bezpieczeństwo transmisji danych 2. Ochrona przed dekompilacją 3. Walidacja wprowadzanych i wyświetlanych danych 4. Bezpieczeństwo przechowywanych przez aplikację danych 5. Formę zapisu i przechowywania logów aplikacji 6. Statyczna analiza aplikacji Przejdźmy do statystyk.. …a nie są one optymistyczne. Otóż, 40% aplikacji niestety nie sprawdza autentyczności używanych certyfikatów SSL, co zdecydowanie pozwala na stworzenie fałszywego certyfikatu przez atakującego w celu wykonania ataku Man in The Middle. Ponad 20% aplikacji w ogóle komunikowało się bez szyfrowania. Spora ilość aplikacji (90%) zawierała odnośniki, które były nieszyfrowane (bez SSL) – a to pozwalało atakującemu, który przechwyci ruch z aplikacji, na wstrzyknięcie kodu JavaScript/HTML w celu stworzenia np. fałszywego ekranu logowania, by zmylić użytkownika i w ten sposób wyciągnąć jego dane dostępowe do konta bankowego — oto przykład: Wartym uwagi faktem jest to, że ponad 50% aplikacji zawiera podatności na wstrzyknięcie kodu JavaScript poprzez źle zabezpieczone implementacje interfejsu użytkownika (UIWebView), gdzie wprowadzane i wyświetlane informacje pozwalają np. na atak XSS. Pozwalało to atakującemu na wykonanie podstawowych czynności jak wysłanie wiadomości e-mail/SMS z urządzenia ofiary. Dodatkowo, tylko 20% uruchomiło opcje PIE (Position Independent Executable) oraz Stack Smashing Protection, które zmniejszają ryzyko ewentualnych manipulacji związanych z możliwymi błędami pamięci. Kolejną rzeczą (w przypadku 70% aplikacji) jest brak jakichkolwiek alternatywnych rozwiązań potwierdzających uwierzytelnienie użytkownika jako klienta banku… takim rozwiązaniem jest np. dwuskładnikowe uwierzytelnianie, które oprócz podania hasła dostępowego do konta, wymaga jeszcze podania specjalnie wysłanego kodu SMSem przez bank. Sanchez w swoich badaniach, zwrócił także uwagę na generowanie i przechowywanie logów aplikacji, które zawierają m.in. raporty w przypadku ‘crashu’ aplikacji, a częstokroć są to wrażliwe informacje pod kątem bezpieczeństwa. Przede wszystkim, jak słusznie zauważył, takie logi raportowe są przydatnym źródłem informacji przy tworzeniu exploita, który bez problemu wykorzysta słabości aplikacji i pozwoli atakującemu na dostęp do konta bankowego. Analiza statyczna… …wykazała niestety kolejne “ciekawostki”. Autor, używając oprogramowania Clutch wyciągnął z kodu źródłowego takie rzeczy jak dane dot. uwierzytelniania: __text:00056350 ADD R0, PC ; selRef_sMobileBankingURLDBTestEnv__ __text:00056352 MOVT.W R2, #0x46 __text:00056356 ADD R2, PC ; "https://mob_user:T3stepwd@db.internal/internal/db/start.do?login=mobileEvn" __text:00056358 LDR R1, [R0] ; "setMobileBankingURLDBTestEnv_iPad_mobil"... __text:0005635A MOV R0, R4 __text:0005635C BLX _objc_msgSend __text:00056360 MOV R0, (selRef_setMobileBankingURLDBTestEnvWithValue_iPad_mobileT_ - 0x56370) ; selRef_setMobileBankingURLDBTestEnvWithValue_iPad_mobileT_ __text:00056368 MOVW R2, #0xFA8A __text:0005636C ADD R0, PC ; selRef_setMobileBankingURLDBTestEnvWithValue_i_mobileT_ __text:0005636E MOVT.W R2, #0x46 __text:00056372 ADD R2, PC ; "https://mob_user:T3stepwd@db.internal/internal/db/start.do?login=mobileEvn&branch=%@&account=%@&subaccount=%@" __text:00056374 LDR R1, [R0] ; "setMobileBankingURLDBTestEnvWith_i"... __text:00056376 MOV R0, R4 __text:00056378 BLX _objc_msgSend Sanchez zaznacza, że łatwość zdobycia takich informacji może otworzyć drogę potencjalnemu atakującemu do uzyskania dostępu do środowiska deweloperskiego danego banku i przeprowadzenia operacji na szerszą skalę – choćby wstrzyknięcia niepostrzeżenie do aplikacji złośliwego kodu, a następnie zarażenia nim wszystkich klientów danego banku, którzy z wykorzystaniem owej aplikacji, logują się na swoje konta bankowe… Niezaszyfrowana baza Sqlite dostępna dla każdego Informacje dotyczące szczegółów konta bankowego klienta albo historię jego transakcji można wyciągnąć z tworzonych przez aplikację nieszyfrowanych baz sqlite… Baza jest możliwa do pozyskania przez złodzieja zdalnie (exploitem) lub lokalnie, używając aplikacji, która zrobi jailbreak systemu iOS. Sanchez nawet zrobił zrzut ekranu, jednej z odczytanych baz: Wnioski z przeprowadzonych testów Ariel Sanchez poprzez przeprowadzenie powyższych testów oraz podzielenie się wynikami chciał zwrócić uwagę na fakt słabego poziomu bezpieczeństwa aplikacji bankowych, zwłaszcza patrząc przez pryzmat szczególnie wrażliwych danych przez nie przetwarzanych. Z punktu widzenia bezpieczeństwa, są to jedne z najczęściej atakowanych usług. Autor, zarekomendował więc poprawne nawyki/czynności, których praktykowanie przez programistów, znacznie zwiększy poziom bezpieczeństwa tworzonych aplikacji. Upewnij się, że wszystkie połączenia korzystają z bezpiecznych protokołów transmisji danych (HTTPS) Wymuś weryfikację certyfikatów SSL przez aplikację Chroń wrażliwe dane przechowywane na urządzeniu klienckim, szyfrując je z użyciem API dla iOS. Wymuś dodatkowe formy sprawdzenia urządzenia pod kątem ewentualnego jailbreak’a Używaj sprawdzonych sposobów na uniemożliwienie zdebugowania aplikacji aby spowolnić ewentualny reverse engineering plików binarnych Usuń wszystkie informacje, które mogą zostać wykorzystane przez atakujacego np. dotyczące infrastruktury developerskiej, albo komunikacji aplikacji z serwerami Autor wynikami swoich badań podzielił się z bankami, których aplikacje testował. Można więc liczyć na to, że zespoły programistów niebawem usuną wszystkie zgłoszone przez Sancheza usterki. PS. Jeśli interesuje was bezpieczeństwo aplikacji mobilnych, zapraszamy na nasze szkolenie z tej tematyki — odbędzie się ono już 6-7 lutego w Krakowie. Jeszcze przez tydzień można zapisać się na nie po niższej cenie. ,Grzegorz Wróbel