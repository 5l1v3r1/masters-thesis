Kiedy przedwczoraj informowaliśmy o dziurze dotyczącej 70% użytkowników Androida, niektórzy z Was przewidywali, że niebawem pojawi się równie krytyczny i powszechny błąd w urządzeniach Apple. Prorocy… Oto wykrakana przez Was dziura — dotyczy ona obsługi połączeń szyfrowanych (SSL) na wszystkich urządzeń z jabłuszkiem, telefonach, tabletach i komputerach. Na czym polega błąd? Na podwójnym failu O błędzie informuje Apple i robi to w dość enigmatycznych słowach. Dowiadujemy się, że Mówiąc wprost, jest to klasyczny atak Man in the middle. Jeśli atakujący znajdzie się na drodze pomiędzy waszym urządzeniem z jabłuszkiem a serwerem docelowym, to będzie mógł niepostrzeżenie rozszyfrować połączenia typu HTTPS, co pozwoli mu zapoznać się np. z przesyłanymi hasłami. Atakującym może być każdy, kto znajduje się w tej samej sieci co ofiara, bądź kontroluje jakieś serwery operatorów (dostawców internetu), nie tylko NSA ;-) Wystarczy wykonać zwykły arp spoofing np. w firmowej sieci ethernetowej lub otwartej sieci Wi-Fi w McDonaldzie i zamiast — jak do tej pory, wykorzystywać sslstripa, który posiada pewne ograniczenia — zmodyfikować sesję ofiary tak, aby wykorzystać dziurę o której poinformowało Apple. To pozwoli atakującemu na podszycie się pod serwer, z którym chce się połączyć ofiara. Pocieszające jest jednak to, że na razie nie są znane żadne publiczne narzędzia służące do wykorzystywania tego błędu — ale community jest już na tropie przyczyny błędu. Warto wspomnieć, że na atak podatne są także …mechanizmy aktualizacji (zestawiają one sesję po SSL). Jest więc możliwe, że nastąpi kuriozalna sytuacja, w której atakujący przy pomocy tej dziury uniemożliwi ofierze ściągnięcie aktualizacji, która dziurę tę ma wyeliminować… GOTO FAIL x 2 Oto fragment kodu w którym odkryto błąd (jest nim podwójne użycie instrukcji “goto fail“): static OSStatus SSLVerifySignedServerKeyExchange(SSLContext *ctx, bool isRsa, SSLBuffer signedParams, uint8_t *signature, UInt16 signatureLen) { OSStatus err; ... if ((err = SSLHashSHA1.update(&hashCtx, &serverRandom)) != 0) goto fail; if ((err = SSLHashSHA1.update(&hashCtx, &signedParams)) != 0) goto fail; goto fail; if ((err = SSLHashSHA1.final(&hashCtx, &hashOut)) != 0) goto fail; ... fail: SSLFreeBuffer(&signedHashes); SSLFreeBuffer(&hashCtx); return err; } Drugie, niepotrzebne użycie instrukcji goto fail powoduje, że nie jest ona przypięta do warunku if, ale przechwytuje bieg programu i zawsze prowadzi do “faila” co oznacza, że weryfikacja sygnatury zawsze będzie poprawna. Mam iPhone/iPada/Mac OS X – co robić jak żyć? Rozwiązaniem problemu w przypadku urządzeń mobilnych (iPhone, iPad, AppleTV) jest aktualizacja do iOS 7.0.6. (lub 6.1.6 dla starszych urządzeń jak np. iPhone 3GS). Instrukcję aktualizacji krok-po-kroku znajdziecie tutaj. (Niektórzy wspominają, że aktualizacja usuwa także dziurę pozwalającą na jailbreak — ale nie jest to prawda — dalej jailbreak jest możliwy.) Aby sprawdzić, czy jesteś podatny, kliknij tutaj. Co ciekawe, chociaż Mac OS X jest podatny (i test wykonany na Safari pokazuje, że atak się powiódł) to na Google Chrome na Mac OS X atak nie zadziałał. Rozwiązania dla komputerów (Maców i Macbooków) jeszcze nie ma. Apple w zasadzie oficjalnie nie potwierdziło, że błąd dotyczy Mac OS X, ale potwierdzili to niezależni badacze, którzy zreversowali patche wypuszczone przez Apple. Trzeba więc czekać na patch i w miarę możliwości nie korzystać z Safari, a Gogole Chrome (które nie jest podatne na ten atak, z racji posiadania własnych bibliotek do obsługi SSL) Czy to celowy błąd? Pewnie za chwilę pojawią się sugestie, że taki błąd to celowe działanie programisty, aby wbudować taką tylną furtkę w system operacyjny, która ułatwi pracę służbom. Wspomnijmy tu, że są specjalne konkursy tzw. niewinnego programowania, które ma na celu, w razie odkrycia błędu, uniemożliwić udowodnienie, że było to celowe działanie programisty. Przypomnijmy, że podobne pogłoski krążyły wokół Linuksa po wypowiedzi Linusa, IPSec w OpenBSD, TPM-a w Windowsie 8, a backdoory w oprogramowaniu znanych firm to jak przyznają sami programiści — często celowe zagranie.. Przywołajmy chociażby drukarki Samsunga, macierze HP, loadbalancery F5, routery D-Linka czy TP-Linka, a nawet sterowniki ładowarek do paluszków. ,vi.curry