Dowcipna (w kategorii czarnej komedii) pomyłka przydarzyła się kilka dni temu serwisowi Tumblr. Jeden z programistów (administratorów?), zmieniając kod na produkcji (najprawdopodobniej przy pomocy edytora Vi lub Vim) popełnił małą, popularną dla tego edytora “literówkę” i w kodzie PHP zamiast znaku < pojawiła się literka i. O konsekwencjach przeczytacie poniżej. Kolejny argument dla zwolenników Emacsa ;) Na skutek błędu, zmiast od <?php, plik z kodem zaczął się od i?php i w związku z tym nie trafił na interpreter PHP. Co za tym idzie, kod źródłowy zawierający — jak to określa ekipa Tumblra — “dane wrażliwe“, ujrzał światło dzienne. Jak informuje Sucuri, kodzie znajdowały się m.in. klucze API, hasło do bazy danych oraz adresy wewnętrznych serwerów (na szczęście, w większości niedostępne z internetu). Niestety, błędy w kodzie (z winy człowieka, a nie oprogramowania) zdarzają się nad wyraz często i dlatego warto zdawać sobie sprawę, że nie zawsze display_errors = Off w konfiguracji PHP jest w stanie je powstrzymać. W opisanym powyżej przypadku Tumblra ta opcja nie ma żadnego znaczenia. Jak “chronić” kod PHP przed omyłkowym opublikowaniem? Jak zabezpieczyć się przed tego typu sytuacjami wyjaśnialiśmy już przy okazji podobnego zdarzenia na Onecie. Dodatkowo, na przykładzie Tumblera pięknie widać, że Security in depth to dobra strategia; unikalne hasła i brak dostępu do bazy od strony internetu spowodowały, że pomyłka programisty Tumblra przerodziła się tylko w niegroźny problem “wizerunkowy”, a nie poważny incydent bezpieczeństwa. Pewnie, można było nie pracować na produkcji, można było lepiej skonfigurować WAF-y — i pewnie teraz to zrobią, bo żeby wyjść z twarzą, Tumblr poinformował swoich użytkowników, że nawiązał współpracę z niezależną firmą audytorską. źródło ,igH