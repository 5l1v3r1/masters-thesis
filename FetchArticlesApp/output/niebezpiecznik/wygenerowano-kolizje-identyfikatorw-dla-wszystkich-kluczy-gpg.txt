Osoby stojące za projektem Evil32 informują, że korzystając z GPU znaleźli kolizje dla wszystkich opublikowanych w internecie (tj. na keyserverach) kluczy GPG z tzw. “strong setu”. Nie należy jednak wpadać w panikę, bo działania te nie “łamią” modelu GPG, choć w pewnych sytuacjach rzeczywiście mogą stwarzać niemałe zagrożenie. Jak wygenerowano kolizje? Na początek wyjaśnijmy, że kolizja jest tu rozumiana w następujący sposób: udało się wygenerować inny klucz, który ma takie samo 32 bitowe ID, jak prawdziwy klucz. Generowanie kolizji shortID dla jednego klucza zajmuje 4 sekundy przy użyciu tego narzędzia. To oznacza, że atakujący może podrzucać na keyserwery dodatkowy klucz, który będzie wyglądał tak samo jak oryginalny i będzie się razem z nim ściągał na komputer ofiary przy użyciu komendy pobrania klucza z keyservera: free@turing ~$ gpg --keyserver pgp.mit.edu --recv-keys 10000001 gpg: requesting key 10000001 from hkp server pgp.mit.edu gpg: key 10000001: public key "John Doe" imported gpg: key 10000001: public key "Jane Doe" imported gpg: Total number processed: 2 gpg: imported: 2 (RSA: 2) Jeśli chcecie sprawdzić, czy wasz klucz został sklonowany, to rzućcie okiem na http://pgp.evil32.com/ — fałszywy keyserver wystawiony przez badaczy, zawierający skolidowane, wygenerowane przez nich klucze będące “odwzorowaniem” prawdziwych kluczy. Podczas komunikacji z keyserverami GPG (z reguły) nie wykorzystuje szyfrowania w transporcie (np. TLS) i dodatkowo nie weryfikuje kluczy uzyskanych poprzez parametr –recv-keys. To stwarza ryzyko ataku Man in the Middle. Co robić? Jak żyć? Z wymenionych powyżej powodów, zawsze powinniśmy wykonywać ręczne sprawdzenie, czy klucz który pobraliśmy, na pewno jest tym, który powinniśmy pobrać. Wystarczy wykonać polecenie gpg –fingerprint i porównać wartości z drugą stroną poprzez inny kanał komunikacji. W związku z powyższym, problem przedstawiony przez badaczy wydaje się być lekko rozdmuchany. W końcu podstawą oceny zaufania do kluczy w modelu OpenGPG jest weryfikacja ich podpisów, które winny być złożone na kluczu przez znane nam osoby (z którymi nawiązaliśmy wcześniej pewne “zaufanie”, np. poprzez wspólne uczestnictwo w Key Signing Party, na którym wzajemnie podpisaliśmy sobie klucze) albo przez osoby, którym znane nam osoby podpisały klucze, gwarantując tym samym ich tożsamość. Niestety, na swojej stronie badacze nie wspominają w szczegółach o tych środkach zaradczych… Kiedy taki klucz faktycznie stwarza zagrożenie? O ile z ludźmi można (z ogromnym wysiłkiem, ale jednak) zrealizować sprawnie działający, powyższy model zaufania polegający na poprawnej wymianie kluczy, to trochę gorzej będzie z narzędziami, które np. weryfikują poprawność paczek w oparciu o ich podpisy złożone kluczami GPG. To właśnie tu upatrujemy faktyczne ryzyko ataku wstrzyknięcia “skolidowanego” klucza. Świetnym przykładem jest Puppet, dla którego badacze rozpisali scenariusz ataku. Pięknie zadziała on nawet wtedy, jeśli ofiara (użytkownik Puppeta) będzie stosowała się do kroków opisanych w dokumentacji Puppeta, jako zalecane podczas weryfikacji autentyczności paczki. Tu uwaga do wszystkich developerów. Jeśli w instrukcjach sugerujecie użytkownikom, aby ściągali klucze z keyserverów, zmodyfikujcie swoje komendy tak, aby wskazywały one na wasz klucz po longID, a nie shortID. GPG wymaga zmian? Badacze słusznie zauważają, że o ile z GPG korzystamy od lat, to przez ten czas niewiele zmieniła się użyteczność tego narzędzia. Np. w przypadku “wielu dopasowań” dla tego samego keyID albo UserID, GPG mogłoby wyraźnie ostrzegać użytkownika, wymuszając na nim podjęcie decyzji i ręczną weryfikację klucza. Nie do końca też działa tzw. Web of Trust — niewiele osób zgodnie ze sztuką podpisuje sobie klucze, pozwalając na budowanie łańcuchów zaufania. Może dobrym pomysłem byłoby połączenie Key Signing Party z wyborami? Taka dodatkowa budka GPG, do której każdy w celu weryfikacji mógłby zajrzeć, skoro i tak dowód osobisty ma przy sobie…? A może lepszą odpowiedzią na tego typu bolączki stanie się zyskujący popularność serwis https://keybase.io? ,Piotr Konieczny