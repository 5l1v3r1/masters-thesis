Boleśnie mogli przekonać się o tym właściciele aplikacji napisanych we frameworku Django — standardowa funkcja hashująca przy dłuższych danych wejściowych mogła spowodować zawieszenie pracy serwera. Wielkość ma znaczenie ;) Długie hasło w tym przypadku oznaczało naprawdę długie — np. ciąg znaków o rozmiarze 1MB. Dlaczego przetwarzanie tak długiego ciągu mogło zawiesić serwer? Otóż Django wykorzystuje algorytm PBKDF2 do generowania hashy. Algorytm ten poddaje dane wejściowe wielokrotnemu hashowaniu, dzięki czemu atakujący musi poświęcić więcej czasu na “łamanie” skrótu. Negatywnym skutkiem jest jednak obciążenie, jakie może wygenerować ten algorytm podczas przetwarzania dużych danych wejściowych. Django potrzebowało ok. 1 minuty na przetworzenie hasła o wielkości 1MB. Łatwo sobie wyobrazić, jak zachowałby się serwer, gdyby atakujący co chwila podsyłał mu tej wielkości ciągi na wejście funkcji skrótu. Na błąd, 14 września natknął się Josh Wright, a już dzień później Django wypuściło aktualizację wprowadzającą ograniczenie długości dla danych wchodzących na funkcję skrótu do 4096 bytes (co przy założeniu przechowywania jednego znaku na 2 bajtach daje ciągle możliwość wykorzystywania haseł o długości 2048 znaków). Dalej więc zachęcamy do korzystania z możliwie długich haseł. Przy okazji Django przypomniało o procedurze responsible disclosure. Błędy tego kalibru “bezpieczniej” jest zgłaszać prywatnie do producenta, a nie umieszczać w publicznie dostępnym internecie. ,igH